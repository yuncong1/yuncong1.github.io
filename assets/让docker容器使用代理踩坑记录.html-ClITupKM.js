import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as i,o as n}from"./app-C2A82uq4.js";const t={};function o(p,e){return n(),a("div",null,e[0]||(e[0]=[i(`<h1 id="让docker容器使用代理踩坑记录" tabindex="-1"><a class="header-anchor" href="#让docker容器使用代理踩坑记录"><span>让docker容器使用代理踩坑记录</span></a></h1><h2 id="起因" tabindex="-1"><a class="header-anchor" href="#起因"><span>起因</span></a></h2><p>在nas的new-api上添加了gemini渠道，但是测试时连不上，看来是没法翻墙，明明之前装了mihomo</p><p><strong>已有设置：</strong> docker部署了mihomo，网络模式host，端口7890，宿主机ip192.168.1.88。</p><h2 id="尝试过程" tabindex="-1"><a class="header-anchor" href="#尝试过程"><span>尝试过程：</span></a></h2><p><strong>设置环境变量</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>export http_proxy=&quot;http://192.168.1.88:7890&quot;</span></span>
<span class="line"><span>export https_proxy=&quot;http://192.168.1.88:7890&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但这个只是临时变量，仅在当前终端会话有效，没用。</p><p><strong>将new-api容器网络模式改为host</strong></p><p>连很长时间还是连不上</p><p><strong>给容器增加环境变量</strong></p><p>增加了<code>http_proxy=&quot;http://192.168.1.88:7890&quot;</code>和<code>https_proxy=&quot;http://192.168.1.88:7890&quot;</code>两个环境变量，重启。</p><p>这次倒是不用等很久，立即报错</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>错误：do request failed: Post &quot;https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent&quot;: proxyconnect tcp: dial tcp 192.168.1.88:7890: connect: connection refused</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="原因" tabindex="-1"><a class="header-anchor" href="#原因"><span>原因</span></a></h2><h3 id="host-网络模式失败" tabindex="-1"><a class="header-anchor" href="#host-网络模式失败"><span>host 网络模式失败</span></a></h3><p>当容器使用host网络时，它会直接共享宿主机的网络命名空间（Network Namespace），此时：</p><ul><li>容器内 localhost= 宿主机的localhost（即 127.0.0.1）</li><li>容器内直接暴露所有宿主机端口，无需额外端口映射</li></ul><p>看起来应该能访问才对，那么为什么还是不行？</p><p>原因在于，host 网络模式虽然让容器和宿主机共享了网络接口、IP 和端口，但 <strong>不会自动继承宿主机的环境变量或应用配置</strong>。换句话说，即使网络层面打通了，容器内的应用仍然需要主动配置代理（比如通过 http_proxy 环境变量指定代理地址）。如果没有配置，应用会直接尝试连接外网，完全绕过代理。由于我的需求是翻墙连gemini的api，直接连接显然行不通，所以就失败了。</p><h3 id="增加环境变量失败" tabindex="-1"><a class="header-anchor" href="#增加环境变量失败"><span>增加环境变量失败</span></a></h3><p>尽管增加了环境变量<code>http_proxy=&quot;http://192.168.1.88:7890&quot;</code> 和 <code>https_proxy=&quot;http://192.168.1.88:7890</code> ，但连接被拒绝。</p><p>问题出在代理地址的配置上：</p><ul><li>宿主机上的 mihomo 的config文件里没有配置 bind-address ，所以代理默认监听 127.0.0.1:7890，也就是说，它只接受来自本机（宿主机）的连接请求。</li><li>在 host 网络模式下，容器共享宿主机的网络命名空间，所以容器内的 127.0.0.1 其实就是宿主机的 127.0.0.1，可以通过 127.0.0.1:7890 访问代理。</li><li>但我在环境变量里设置的是 <code>http://192.168.1.88:7890</code> 时，这是宿主机的外部 IP 地址。mihomo 默认并没有监听 192.168.1.88:7890，所以当容器内的应用试图连接这个地址时，连接被拒绝（connection refused）。</li></ul><h2 id="正确配置过程" tabindex="-1"><a class="header-anchor" href="#正确配置过程"><span>正确配置过程</span></a></h2><h3 id="host模式" tabindex="-1"><a class="header-anchor" href="#host模式"><span>host模式</span></a></h3><p>new-api的docker网络模式设置为host，并在docker启动命令或者图形界面设置环境变量，大致如下，根据实际更改</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -d \\</span></span>
<span class="line"><span>  --network host \\</span></span>
<span class="line"><span>  -e http_proxy=&quot;http://127.0.0.1:7890&quot; \\</span></span>
<span class="line"><span>  -e https_proxy=&quot;http://127.0.0.1:7890&quot; \\</span></span>
<span class="line"><span>  your-image-name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bridge模式" tabindex="-1"><a class="header-anchor" href="#bridge模式"><span>bridge模式</span></a></h3><p>当然网络也可以继续使用bridge模式，这时需要在 mihomo 的config文件里设置监听<code>bind-address = 0.0.0.0</code> ，这个意思是让 mihomo 接受所有接口的连接请求。<br> 但只有这样还不行，new-api通过主机的IP <code>192.168.1.88</code> 来访问时，Mihomo 会认为这是一个局域网连接，所以需要还需要再config里设置 <code>allow-lan: true</code>，允许局域网使用该代理。</p><p>然后重启mihomo容器，这时候我们就可以使用宿主机的ip，即<code>192.168.1.88</code>设置代理了。</p>`,31)]))}const h=s(t,[["render",o]]),l=JSON.parse('{"path":"/posts/%E8%AE%A9docker%E5%AE%B9%E5%99%A8%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.html","title":"让docker容器使用代理踩坑记录","lang":"zh-CN","frontmatter":{"title":"让docker容器使用代理踩坑记录","date":"2025-08-04T00:00:00.000Z","tags":["踩坑","nas"]},"git":{"createdTime":1754381245000,"updatedTime":1754381245000,"contributors":[{"name":"lyc","username":"lyc","email":"yuncong1@qq.com","commits":1,"url":"https://github.com/lyc"}]},"readingTime":{"minutes":2.86,"words":858},"filePathRelative":"posts/让docker容器使用代理踩坑记录.md","excerpt":"\\n<h2>起因</h2>\\n<p>在nas的new-api上添加了gemini渠道，但是测试时连不上，看来是没法翻墙，明明之前装了mihomo</p>\\n<p><strong>已有设置：</strong> docker部署了mihomo，网络模式host，端口7890，宿主机ip192.168.1.88。</p>\\n<h2>尝试过程：</h2>\\n<p><strong>设置环境变量</strong></p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>export http_proxy=\\"http://192.168.1.88:7890\\"</span></span>\\n<span class=\\"line\\"><span>export https_proxy=\\"http://192.168.1.88:7890\\"</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{h as comp,l as data};
